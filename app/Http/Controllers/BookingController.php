<?php

namespace App\Http\Controllers;

use App\Models\Showtime;
use App\Models\Seat;
use App\Models\SeatReservation;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\UserVoucher;
use App\Models\Voucher;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class BookingController extends Controller
{
    /**
     * Show seat selection page
     */
    public function selectSeats(Showtime $showtime, Request $request)
    {
        // Validate seat count parameter
        $seatCount = $request->integer('seats', 1);
        if ($seatCount < 1 || $seatCount > 6) {
            return redirect()->back()->with('error', 'Jumlah kursi tidak valid.');
        }

        // Load showtime with necessary relationships
        $showtime->load([
            'movie:id,title,poster_url,duration,genre,rating',
            'cinemaHall.cinema.city',
            'cinemaHall.seats' => function ($query) {
                $query->orderBy('row_label')->orderBy('seat_number');
            }
        ]);

        // Get seats that are already reserved for this showtime
        $reservedSeatIds = SeatReservation::query()
            ->where('showtime_id', $showtime->id)
            ->where('status', 'reserved')
            ->where('expires_at', '>', now())
            ->pluck('seat_id')
            ->toArray();

        // Group seats by row label
        $seatsByRow = $showtime->cinemaHall->seats->groupBy('row_label');

        // Pass current page info for navigation
        $current_page = 'booking';

        return view('booking.select-seats', compact(
            'showtime',
            'seatCount',
            'seatsByRow',
            'reservedSeatIds',
            'current_page'
        ));
    }

    /**
     * Reserve selected seats
     */
    public function reserveSeats(Request $request)
    {
        $request->validate([
            'showtime_id' => 'required|exists:showtimes,id',
            'seat_ids' => 'required|array|min:1|max:6',
            'seat_ids.*' => 'exists:seats,id'
        ]);

        try {
            DB::beginTransaction();

            $showtime = Showtime::findOrFail($request->showtime_id);
            $seatIds = $request->seat_ids;

            // Check if any of the seats are already reserved
            $alreadyReserved = SeatReservation::query()
                ->whereIn('seat_id', $seatIds)
                ->where('showtime_id', $showtime->id)
                ->where('status', 'reserved')
                ->where('expires_at', '>', now())
                ->exists();

            if ($alreadyReserved) {
                DB::rollBack();
                return response()->json([
                    'success' => false,
                    'message' => 'Beberapa kursi sudah dipesan oleh orang lain. Silakan pilih kursi lain.'
                ], 422);
            }

            // Create order
            $subtotal = $showtime->price * count($seatIds);

            $order = Order::create([
                'user_id' => Auth::id(),
                'showtime_id' => $showtime->id,
                // order_number will be auto-generated by Order model boot method
                'subtotal' => $subtotal,
                'discount_amount' => 0,
                'total_amount' => $subtotal,
                'status' => Order::STATUS_PENDING,
                'expiry_date' => now()->addMinutes(10), // batas waktu pembayaran
            ]);

            // Create order items (one per seat)
            foreach ($seatIds as $seatId) {
                OrderItem::create([
                    'order_id' => $order->id,
                    'seat_id' => $seatId,
                    'price' => $showtime->price,
                    'status' => OrderItem::STATUS_BOOKED,
                ]);
            }

            // Reserve seats
            foreach ($seatIds as $seatId) {
                // Because seat_reservations has a unique(showtime_id, seat_id),
                // reuse the row if it exists and not actively reserved
                $existing = SeatReservation::where('showtime_id', $showtime->id)
                    ->where('seat_id', $seatId)
                    ->first();

                if ($existing && $existing->status === SeatReservation::STATUS_RESERVED && $existing->expires_at > now()) {
                    // Safety guard (should not happen due to earlier check)
                    DB::rollBack();
                    return response()->json([
                        'success' => false,
                        'message' => 'Kursi yang dipilih baru saja diambil. Silakan pilih kursi lain.'
                    ], 422);
                }

                SeatReservation::updateOrCreate(
                    [
                        'showtime_id' => $showtime->id,
                        'seat_id' => $seatId,
                    ],
                    [
                        'user_id' => Auth::id(),
                        'reserved_at' => now(),
                        'expires_at' => now()->addMinutes(10),
                        'status' => SeatReservation::STATUS_RESERVED,
                    ]
                );
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'order_id' => $order->id,
                'redirect_url' => route('booking.checkout', $order)
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Terjadi kesalahan saat memesan kursi. Silakan coba lagi.'
            ], 500);
        }
    }

    /**
     * Show checkout page
     */
    public function checkout(Order $order)
    {
        // Make sure this order belongs to the authenticated user
        if ($order->user_id !== Auth::id()) {
            abort(403);
        }

        // Check if order is still valid
        if ($order->status !== Order::STATUS_PENDING || ($order->expiry_date && $order->expiry_date < now())) {
            return redirect()->route('home')->with('error', 'Order sudah kedaluwarsa atau tidak valid.');
        }

        // Load necessary relationships
        $order->load([
            'showtime.movie',
            'showtime.cinemaHall.cinema',
            'orderItems.seat'
        ]);

        $current_page = 'checkout';

        return view('booking.checkout', compact('order', 'current_page'));
    }

    /**
     * List user vouchers for this order (only unused and valid)
     */
    public function listVouchers(Order $order)
    {
        if ($order->user_id !== Auth::id()) abort(403);

        $user_vouchers = UserVoucher::with('voucher')
            ->where('user_id', Auth::id())
            ->where('is_used', false)
            ->get()
            ->filter(function ($uv) {
                return $uv->voucher && $uv->voucher->isAvailable();
            })
            ->values();

        return response()->json([
            'success' => true,
            'vouchers' => $user_vouchers,
        ]);
    }

    /**
     * Apply selected voucher to the order.
     */
    public function applyVoucher(Order $order, Request $request)
    {
        if ($order->user_id !== Auth::id()) abort(403);
        if ($order->status !== Order::STATUS_PENDING) return response()->json(['success' => false, 'message' => 'Order tidak dapat diubah'], 400);

        $request->validate([
            'user_voucher_id' => 'required|exists:user_vouchers,id',
        ]);

        $user_voucher = UserVoucher::with('voucher')->where('id', $request->user_voucher_id)->where('user_id', Auth::id())->firstOrFail();
        $voucher = $user_voucher->voucher;
        if (!$voucher || !$voucher->isAvailable()) {
            return response()->json(['success' => false, 'message' => 'Voucher tidak valid'], 400);
        }

        // Check min purchase
        if ($voucher->min_purchase && $order->subtotal < $voucher->min_purchase) {
            return response()->json(['success' => false, 'message' => 'Subtotal belum memenuhi minimal pembelian'], 400);
        }

        // Calculate discount (robust percentage handling and IDR rounding)
        $subtotal = (float) $order->subtotal;
        $discount = 0.0;
        if ($voucher->type === 'percentage') {
            $raw = (float) $voucher->value; // could be 60 or 0.6
            $ratio = $raw > 1 ? $raw / 100.0 : $raw; // normalize to 0-1
            $discount = $subtotal * $ratio;
            $maxCap = $voucher->max_discount !== null ? (float) $voucher->max_discount : null;
            if (!is_null($maxCap) && $maxCap > 0) {
                $discount = min($discount, $maxCap);
            }
        } else {
            $discount = (float) $voucher->value;
        }

        // In IDR we don't use cents; round to nearest rupiah safely
        $discount = (float) round($discount);
        $discount = max(0.0, min($discount, $subtotal));
        $new_total = $subtotal - $discount;

        // Update order
        $order->update([
            'voucher_id' => $voucher->id,
            'discount_amount' => $discount,
            'total_amount' => $new_total,
        ]);

        return response()->json([
            'success' => true,
            'message' => 'Voucher diterapkan',
            'order' => $order->fresh(),
            'discount' => $discount,
            'total' => $new_total,
        ]);
    }

    /**
     * Generate unique order number
     */
    private function generateOrderNumber(): string
    {
        $prefix = 'TKT';
        $date = now()->format('Ymd');
        $random = str_pad(mt_rand(1, 9999), 4, '0', STR_PAD_LEFT);
        
        return $prefix . $date . $random;
    }
}
